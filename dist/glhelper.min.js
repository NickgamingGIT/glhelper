const GLH={Canvas:class{constructor(t,e,r=null,i=null){if(this.canvas=document.createElement("canvas"),this.canvas.width=t,this.canvas.height=e,document.body.appendChild(this.canvas),this.gl=this.canvas.getContext("webgl2"),!this.gl)throw new Error("WebGL2 is not supported in this environment.");this.objects=[],this.program=null,this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA),this.vertexSource=r||"\n                attribute vec2 position;\n                attribute vec2 texCoord;\n                uniform vec2 resolution;\n                varying vec2 v_texCoord;\n                void main() {\n                    vec2 clipSpace = (position / resolution) * 2.0 - 1.0;\n                    gl_Position = vec4(clipSpace * vec2(1, -1), 0.0, 1.0);\n                    v_texCoord = texCoord;\n                }\n            ",this.fragmentSource=i||"\n                precision mediump float;\n                varying vec2 v_texCoord;\n                uniform sampler2D u_texture;\n                void main() {\n                    gl_FragColor = texture2D(u_texture, v_texCoord);\n                }\n            ",this._initializeShaders()}_initializeShaders(){const t=this.gl,e=this._compileShader(this.vertexSource,t.VERTEX_SHADER),r=this._compileShader(this.fragmentSource,t.FRAGMENT_SHADER);if(this.program=t.createProgram(),t.attachShader(this.program,e),t.attachShader(this.program,r),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS)){const e=t.getProgramInfoLog(this.program);throw t.deleteProgram(this.program),new Error(`Error linking program: ${e}`)}t.useProgram(this.program);const i=t.getUniformLocation(this.program,"resolution");t.uniform2f(i,this.canvas.width,this.canvas.height)}_compileShader(t,e){const r=this.gl,i=r.createShader(e);if(r.shaderSource(i,t),r.compileShader(i),!r.getShaderParameter(i,r.COMPILE_STATUS)){const t=r.getShaderInfoLog(i);throw r.deleteShader(i),new Error(`Error compiling shader: ${t}`)}return i}add(t){t.initialize(this.gl,this.program),this.objects.push(t)}render(){this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.objects.forEach((t=>t.draw(this.gl,this.program)))}},Geometry:class{constructor(t,e){this.vertices=t,this.texCoords=e,this.vertexBuffer=null,this.texCoordBuffer=null}initialize(t){this.vertexBuffer=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.vertices),t.DYNAMIC_DRAW),this.texCoordBuffer=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this.texCoordBuffer),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.texCoords),t.DYNAMIC_DRAW)}updateBuffer(t){t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this.vertices),t.DYNAMIC_DRAW)}bind(t,e){const r=t.getAttribLocation(e,"position");t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.enableVertexAttribArray(r),t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0);const i=t.getAttribLocation(e,"texCoord");t.bindBuffer(t.ARRAY_BUFFER,this.texCoordBuffer),t.enableVertexAttribArray(i),t.vertexAttribPointer(i,2,t.FLOAT,!1,0,0)}},Texture:class{constructor({texture:t,color:e=[0,0,0,0],lowTexture:r=!1}){this.texturePath=t,this.fallbackColor=e,this.lowTexture=r,this.texture=null}initialize(t){this.texture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this.texture);const e=new Uint8Array([this.fallbackColor[0],this.fallbackColor[1],this.fallbackColor[2],Math.round(255*this.fallbackColor[3])]);if(t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,e),this.texturePath){const e=new Image;e.onload=()=>{t.bindTexture(t.TEXTURE_2D,this.texture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e);const r=this.lowTexture?t.NEAREST:t.LINEAR;t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,r),t.generateMipmap(t.TEXTURE_2D)},e.src=this.texturePath}else{const e=this.lowTexture?t.NEAREST:t.LINEAR;t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,e)}}bind(t,e){const r=t.getUniformLocation(e,"u_texture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,this.texture),t.uniform1i(r,0)}},Object:class{constructor(t,e){this.geometry=t,this.texture=e}initialize(t){this.geometry.initialize(t),this.texture.initialize(t)}draw(t,e){this.geometry.updateBuffer(t),this.geometry.bind(t,e),this.texture.bind(t,e),t.drawArrays(t.TRIANGLES,0,this.geometry.vertices.length/2)}}};